## Simple Temperature controller configuration file
# If running straight from repo this should be at config/controller.conf or if running as a service it MUST BE at /etc/controller.conf
# Note /etc/controller.conf will always take precedence if it exists
# To run multiple output control channels create multiple config files and edit each wrapper script to point to correct config file location

## Directory settings
# Directory containing setpoint file (named 'setpoint') - note if running installed as service MUST BE /etc
WORKING_DIR=scripts
# Script diretory - e.g. e.g. scripts if running from repo 'scripts' or if installed '/opt/scripts/temperature-controller' - note if running as a service wrapper MUST BE located at '/opt/scripts/temperature-controller/temperature_controller.sh'
SCRIPTDIR=scripts
# Output logfile for controller status - e.g. if running from repo 'outputs/control_temp.log' or if installed '/var/log/temperature-controller/control_temp.log'
CONTROLLER_LOGFILE=outputs/control_temp.log
# Output logfile for temperature data - e.g. if running from repo 'outputs/temperature_data.csv' or if installed '/var/log/temperature-controller/temperature_data.csv'
DATA_LOGFILE=outputs/temperature_data.csv
# Output directory for controller log analysis - e.g. if installed /var/log/temperature-controller
ANALYSIS_OUTDIR=outputs

## GPIO pins
# Demand signal output on this pin
GPIO_OUTPUT=17
# Optional feesback from device under control e.g. spare relay contacts to confirm switching successful (default is same as GPIO_OUTPUT)
GPIO_FEEDBACK=17

## Settings for temperature sensor(s) - leave empty to use all available
# Array of one or more unique sensor ID(s) (28-xxxxx etc).  If multiple sensors, list separated by spaces.
WIRED_SENSORS=()
# Optional array of one or more string(s) corresponding to sensor ID(s) above, used as channel labels
# If multiple labels, must be same number as sensor IDs and list separated by spaces. Use quotes "" around each name if they contain spaces
WIRED_SENSOR_LABELS=()

## Options for control and logging
# Hyteresis between switch on and switch-off in degrees (C). Default is 0.1 C, meaning switch on at (setpoint - 0.1) and off at (setpoint) when in heating mode
HYTERESIS=0.1
# Set to '1' if controlling a cooling system.  By default demand signal will be high when heating required
COOLERMODE=0
# Wait between control cycles in seconds (not including time to carry out control).  Only for continuous mode, ignored in one-shot mode. Default is 10 seconds
INTERVAL=10
# Set to 1 to increase verbosity of controller process to aid debugging
VERBOSE=0

## Options for log analysis - NOTE all temperature controller date/timestamps are in UTC
# Start date for analysis - may be in natural language as long as can be interpreted by GNU date.  Default 2020-01-01 which will analyse all available data (assuming timestamps correct!)
START_DATE="2020-01-01"
# End date for analysis - may be in natural language as long as can be interpreted by GNU date..  Default "now" which will analyse all available data (assuming timestamps correct!)
END_DATE="now"

## AWS settings - note requires AWS CLI installed, and permissions configured correctly to allow rw access to specified S3 bucket in AWS IAM, and these credentials set for all users on the controller
# Set to '1' to enable push of temperature data and controller logs and all outputs from controller analysis to AWS S3
ENABLE_S3_SYNC=0
# Full path to destination in S3 in form "s3://mybucket/path-to-destination"
S3_DESTINATION_PATH="s3://mybucket/path-to-destination"
# Set to '1' to enable public read access to data pushed to S3 (sets "--acl public-read") - BE VERY CAREFUL MANAGING PERMISSIONS ON S3 BUCKETS, ESPECIALLY WHEN ALLOWING PUBLIC ACCESS!
S3_PUBLIC_ACCESS=0
# For web publishing via S3 bucket, web server must be enabled on bucket.  Use default index page (index.html) and error page (error.html)
# Note if S3_DESTINATION_PATH is not root of bucket, full URL of file will have to be entered in browser not just bucket URL.
