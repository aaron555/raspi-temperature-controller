#! /bin/bash

# Obtain latest data from all configured wired temperature sensors and return to STDOUT

# Source config - /etc always takes precedence
if [[ -s /etc/controller.conf ]]; then
  source "/etc/controller.conf"
elif [[ -s config/controller.conf ]]; then
  # Try relative path if being run straight from repo - only works if running from repo root
  source "config/controller.conf"
fi
# If no config file can be found, read all available sensors and label with sensor ID

round()
{
echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
};

if [[ -s "${WORKING_DIR}/setpoint" ]]; then
  echo "Setpoint: $(cat ${WORKING_DIR}/setpoint) C"
else
  echo "Setpoint not found in ${WORKING_DIR}/setpoint"
fi

# If no sensors specified, find all available sensors
if [[ -z "${WIRED_SENSORS[@]}" ]]; then
  WIRED_SENSORS=($(find /sys/devices/w1_bus_master1/ -name "28-*" 2>/dev/null | cut -d"/" -f5))
  # If no senor IDs specified, ignore labels - no way of knowing if in right order
  WIRED_SENSOR_LABELS=()
fi

if [[ -z "${WIRED_SENSORS[@]}" ]]; then
  echo "WARNING: No 1-wire temperature sensors specified / found"
fi

date=$(date)
scale=1000

# 1-wire Dallas temperature sensors
for ii in "${!WIRED_SENSORS[@]}"; do
  if [[ -f "/sys/bus/w1/devices/${WIRED_SENSORS[$ii]}/w1_slave" ]]; then
    tempraw=$(cat "/sys/bus/w1/devices/${WIRED_SENSORS[$ii]}/w1_slave" | grep  -E -o ".{0,0}t=.{0,5}" | cut -c 3-)
    tempscaled=$(round "$tempraw/$scale" 2)
    if [[ -z "${WIRED_SENSOR_LABELS[$ii]}" ]]; then
      # If no label(s) specified use sensor ID
      WIRED_SENSOR_LABELS[$ii]="${WIRED_SENSORS[$ii]}"
    fi
  printf "%s Temperature %0.2f C\n" "${WIRED_SENSOR_LABELS[$ii]}" "$tempscaled"
  else
    echo "ERROR: Cannot find sensor ${WIRED_SENSORS[$ii]}"
  fi
done

if [[ -f "/sys/class/gpio/gpio${GPIO_OUTPUT}/value" ]]; then
  echo "Demand Status: $(cat /sys/class/gpio/gpio${GPIO_OUTPUT}/value)"
else
  echo "Demand status cannot be found - GPIO unconfigured"
fi

# CPU temperature (note requires sudo on older raspbian distros)
if [[ -f /opt/vc/bin/vcgencmd ]]; then
  CPU_temp=$(/opt/vc/bin/vcgencmd measure_temp | cut -d'=' -f2 | cut -d"'" -f1)
  echo "CPU Temperature ${CPU_temp} C"
else
  echo "WARNING: Cannot get CPU temperature - unsupported hardware?"
fi
